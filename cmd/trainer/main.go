package main

import (
	"flag"
	"fmt"
	"log"
	"strings"

	"github.com/holygun/go-trainer/trainer"
)

const EVENTS = "X/F/L/X/F/F/X/F/F/X/X/F/F/X/X/F/F/X/F/F/X/F/F/X/X/F/F/F/X/F/L/F/X/X/F/F/X/L/L/X/F/L/F/F/F/X/L/F/F/X/X/L/X/F/F/X/F/F/L/F/F/F/L/F/L/X/F/L/F/L/X/L/F/L/F/F/F/L/L/X/X/F/F/F/L/X/L/F/F/X/L/L/F/F/X/X/F/X/L/F/F/F/X/L/X/L/F/L/F/F/L/F/F/X/F/X/X/F/F/F/F/F/X/F/X/L/L/F/F/F/F/L/L/F/L/F/X/F/F/X/L/L/L/X/X/L/L/F/X/F/F/F/F/F/F/F/F/F/L/F/F/X/L/F/F/X/L/X/X/F/X/F/X/L/F/X/F/F/F/X/F/X/F/X/X/X/F/L/L/X/F/F/F/L/F/F/L/F/L/F/X/F/X/F/F/X/F/F/X/F/F/X/F/F/L/F/F/L/F/F/F/F/F/F/F/F/F/F/L/F/L/F/F/F/F/F/F/X/F/F/F/F/F/F/L/F/F/F/F/F/X/F/F/X/X/L/L/L/F/X/X/X/F/L/F/L/X/X/F/X/F/F/F/F/X/F/L/X/L/L/L/F/F/X/F/F/F/F/X/L/L/F/X/F/F/F/F/F/X/F/F/X/F/F/F/F/F/X/L/F/F/L/F/X/X/F/X/L/X/F/F/F/L/L/F/F/F/X/F/L/L/F/L/F/L/F/L"
const EVENTS_HOCKEY = "F/X/X/X/L/L/L/L/L/L/F/F/X/X/X/F/F/F/X/L/X/X/X/F/X/L/L/F/X/L/X/F/X/F/L/X/F/F/F/X/L/X/X/X/F/F/F/L/F/F/L/F/L/L/L/F/X/F/L/F/L/L/F/L/X/F/F/F/L/F/F/F/F/F/L/F/F/X/F/F/L/X/F/F/F/F/F/F/L/F/X/F/X/F/X/X/F/F/F/F/F/F/X/L"

func main() {
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	var (
		inputString  = flag.String("input", "", "–°—Ç—Ä–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π F/X/L")
		outputFile   = flag.String("output", "trainer_output.csv", "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞")
		verbose      = flag.Bool("verbose", false, "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
		debug        = flag.Bool("debug", false, "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ç–µ—Å—Ç–∞—Ö")
		printReport  = flag.String("report", "", "–ò–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞")
		hockey       = flag.Bool("hockey", false, "–°–æ–±—ã—Ç–∏—è —Ö–æ–∫–∫–µ—è")
		strategyName = flag.String("strategy", "xlWithSupport", "–ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
	)
	flag.Parse()

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–ª–∞–≥–æ–≤
	flags := trainer.Flags{
		Input:    *inputString,
		Output:   *outputFile,
		Verbose:  *verbose,
		Debug:    *debug,
		Report:   *printReport,
		Hockey:   *hockey,
		Strategy: *strategyName,
	}

	if flags.Report != "" {
		readCSVAndPrint(flags.Report)
		return
	}

	if flags.Input == "" && flags.Hockey {
		flags.Input = EVENTS_HOCKEY
	} else if flags.Input == "" {
		flags.Input = EVENTS
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π
	events := trainer.ParseEvents(flags.Input)
	if len(events) == 0 {
		log.Fatal("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π F/X/L –≤–æ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ")
	}

	fmt.Printf("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ %d —Å–æ–±—ã—Ç–∏–π: %v\n", len(events), strings.Join(events, "/"))

	// –†–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
	eventsFromOldest := trainer.ReverseSlice(events)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	strategy, err := trainer.GetStrategy(flags.Strategy)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("üìà –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: %s - %s\n", strategy.Name(), strategy.Description())

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
	records := trainer.GenerateRecords(eventsFromOldest, flags, strategy)

	// –†–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—Ö—É
	records = trainer.ReverseRecords(records)

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
	if err := trainer.SaveToCSV(records, flags.Output); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: %v", err)
	}

	fmt.Printf("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ %s\n", flags.Output)

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	generateStatsAndPrint(records, eventsFromOldest)
}

func readCSVAndPrint(filename string) {
	records, err := trainer.ReadCSV(filename)
	if err != nil {
		log.Fatal(err)
		return
	}
	eventsFromNewest := []string{}
	for i := 0; i < len(records); i++ {
		eventsFromNewest = append(eventsFromNewest, records[i].Result)
	}
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	generateStatsAndPrint(records, trainer.ReverseSlice(eventsFromNewest))
}

func generateStatsAndPrint(records []trainer.TrainerRecord, eventsFromOldest []string) {
	stats := trainer.CalculateStats(records, eventsFromOldest)
	trainer.PrintReport(stats, records)
}
