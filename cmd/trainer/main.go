package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/holygun/go-trainer/trainer"
)

const EVENTS = "X/F/L/X/F/F/X/F/F/X/X/F/F/X/X/F/F/X/F/F/X/F/F/X/X/F/F/F/X/F/L/F/X/X/F/F/X/L/L/X/F/L/F/F/F/X/L/F/F/X/X/L/X/F/F/X/F/F/L/F/F/F/L/F/L/X/F/L/F/L/X/L/F/L/F/F/F/L/L/X/X/F/F/F/L/X/L/F/F/X/L/L/F/F/X/X/F/X/L/F/F/F/X/L/X/L/F/L/F/F/L/F/F/X/F/X/X/F/F/F/F/F/X/F/X/L/L/F/F/F/F/L/L/F/L/F/X/F/F/X/L/L/L/X/X/L/L/F/X/F/F/F/F/F/F/F/F/F/L/F/F/X/L/F/F/X/L/X/X/F/X/F/X/L/F/X/F/F/F/X/F/X/F/X/X/X/F/L/L/X/F/F/F/L/F/F/L/F/L/F/X/F/X/F/F/X/F/F/X/F/F/X/F/F/L/F/F/L/F/F/F/F/F/F/F/F/F/F/L/F/L/F/F/F/F/F/F/X/F/F/F/F/F/F/L/F/F/F/F/F/X/F/F/X/X/L/L/L/F/X/X/X/F/L/F/L/X/X/F/X/F/F/F/F/X/F/L/X/L/L/L/F/F/X/F/F/F/F/X/L/L/F/X/F/F/F/F/F/X/F/F/X/F/F/F/F/F/X/L/F/F/L/F/X/X/F/X/L/X/F/F/F/L/L/F/F/F/X/F/L/L/F/L/F/L/F/L"
const EVENTS_HOCKEY = "F/X/X/X/L/L/L/L/L/L/F/F/X/X/X/F/F/F/X/L/X/X/X/F/X/L/L/F/X/L/X/F/X/F/L/X/F/F/F/X/L/X/X/X/F/F/F/L/F/F/L/F/L/L/L/F/X/F/L/F/L/L/F/L/X/F/F/F/L/F/F/F/F/F/L/F/F/X/F/F/L/X/F/F/F/F/F/F/L/F/X/F/X/F/X/X/F/F/F/F/F/F/X/L"

func main() {
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	var (
		inputString  = flag.String("input", "", "–°—Ç—Ä–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π F/X/L")
		outputFile   = flag.String("output", "trainer_output.csv", "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞")
		verbose      = flag.Bool("verbose", false, "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
		debug        = flag.Bool("debug", false, "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ç–µ—Å—Ç–∞—Ö")
		printReport  = flag.String("report", "", "–ò–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞")
		hockey       = flag.Bool("hockey", false, "–°–æ–±—ã—Ç–∏—è —Ö–æ–∫–∫–µ—è")
		strategyName = flag.String("strategy", "xlDrop", "–ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
		realGames    = flag.Bool("real", false, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –∏–∑ –ø–∞–ø–∫–∏ real-games")
	)
	flag.Parse()

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–ª–∞–≥–æ–≤
	flags := trainer.Flags{
		Input:    *inputString,
		Output:   *outputFile,
		Verbose:  *verbose,
		Debug:    *debug,
		Report:   *printReport,
		Hockey:   *hockey,
		Strategy: *strategyName,
		Real:     *realGames,
	}

	if flags.Report != "" {
		readCSVAndPrint(flags.Report)
		return
	}

	realGamesFlags := map[string]bool{
		"hockey": false,
	}
	if flags.Real {
		if flags.Hockey {
			realGamesFlags["hockey"] = true
		}
		processRealGames(flags, realGamesFlags)
		return
	}

	if flags.Input == "" && flags.Hockey {
		flags.Input = EVENTS_HOCKEY
	} else if flags.Input == "" {
		flags.Input = EVENTS
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π
	events := trainer.ParseEvents(flags.Input)
	if len(events) == 0 {
		log.Fatal("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π F/X/L –≤–æ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ")
	}

	fmt.Printf("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ %d —Å–æ–±—ã—Ç–∏–π: %v\n", len(events), strings.Join(events, "/"))

	// –†–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
	eventsFromOldest := trainer.ReverseSlice(events)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	strategy, err := trainer.GetStrategy(flags.Strategy)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("üìà –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: %s - %s\n", strategy.Name(), strategy.Description())

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
	records := trainer.GenerateRecords(eventsFromOldest, flags, strategy)

	// –†–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—Ö—É
	records = trainer.ReverseRecords(records)

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
	if err := trainer.SaveToCSV(records, flags.Output); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: %v", err)
	}

	fmt.Printf("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ %s\n", flags.Output)

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	generateStatsAndPrint(records, eventsFromOldest)
}

func readCSVAndPrint(filename string) {
	records, err := trainer.ReadCSV(filename)
	if err != nil {
		log.Fatal(err)
		return
	}
	eventsFromNewest := []string{}
	for i := 0; i < len(records); i++ {
		eventsFromNewest = append(eventsFromNewest, records[i].Result)
	}
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	generateStatsAndPrint(records, trainer.ReverseSlice(eventsFromNewest))
}

func generateStatsAndPrint(records []trainer.TrainerRecord, eventsFromOldest []string) {
	stats := trainer.CalculateStats(records, eventsFromOldest)
	trainer.PrintReport(stats, records)
}

// processRealGames –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ real-games
func processRealGames(flags trainer.Flags, realGamesFlags map[string]bool) {
	realGamesDir := "real-games"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
	if _, err := os.Stat(realGamesDir); os.IsNotExist(err) {
		fmt.Printf("–ü–∞–ø–∫–∞ %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º...\n", realGamesDir)
		if err := os.MkdirAll(realGamesDir, 0755); err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ %s: %v", realGamesDir, err)
		}
		fmt.Printf("–ü–∞–ø–∫–∞ %s —Å–æ–∑–¥–∞–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ .input —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n", realGamesDir)
		return
	}

	// –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
	files, err := ioutil.ReadDir(realGamesDir)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ %s: %v", realGamesDir, err)
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º .input —Ñ–∞–π–ª—ã
	var inputFiles []os.FileInfo
	for _, file := range files {
		if !file.IsDir() && strings.HasSuffix(file.Name(), ".input") {
			inputFiles = append(inputFiles, file)
		}
	}

	if len(inputFiles) == 0 {
		fmt.Printf("–í –ø–∞–ø–∫–µ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .input —Ñ–∞–π–ª–æ–≤\n", realGamesDir)
		return
	}

	fmt.Printf("–ù–∞–π–¥–µ–Ω–æ %d .input —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ %s\n", len(inputFiles), realGamesDir)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
	for _, file := range inputFiles {
		processInputFile(filepath.Join(realGamesDir, file.Name()), flags, realGamesFlags)
	}
}

// processInputFile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω input —Ñ–∞–π–ª
func processInputFile(filePath string, flags trainer.Flags, realGamesFlags map[string]bool) {
	fileName := filepath.Base(filePath)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	baseName := strings.TrimSuffix(fileName, ".input")
	parts := strings.Split(baseName, "-")

	strategy, err := trainer.GetStrategy(parts[0])
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %v\n", err)
		return
	}

	var fileFlag string
	if len(parts) > 1 {
		fileFlag = parts[len(parts)-1]
	}

	if flags.Debug {
		fmt.Printf("DEBUG: –§–∞–π–ª %s, —Ñ–ª–∞–≥: %s\n", fileName, fileFlag)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª
	if fileFlag != "" {
		// –ï—Å–ª–∏ —É —Ñ–∞–π–ª–∞ –µ—Å—Ç—å —Ñ–ª–∞–≥, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω
		_, ok := realGamesFlags[fileFlag]
		if !ok {
			fmt.Printf("–û—à–∏–±–∫–∞: —Ñ–ª–∞–≥ '%s' –≤ —Ñ–∞–π–ª–µ %s –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n", fileFlag, fileName)
			fmt.Printf("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏: %v\n", realGamesFlags)
			os.Exit(1)
		}

		// –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —ç—Ç–∏–º–∏ —Ñ–ª–∞–≥–∞–º–∏
		if len(realGamesFlags) > 0 {
			if !realGamesFlags[fileFlag] {
				if flags.Debug {
					fmt.Printf("DEBUG: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª %s (—Ñ–ª–∞–≥ %s –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)\n", fileName, fileFlag)
				}
				return
			}
		} else {
			// –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ñ–ª–∞–≥–∞–º–∏
			if flags.Debug {
				fmt.Printf("DEBUG: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª %s (–µ—Å—Ç—å —Ñ–ª–∞–≥ %s, –Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã)\n", fileName, fileFlag)
			}
			return
		}
	} else {
		// –ï—Å–ª–∏ —É —Ñ–∞–π–ª–∞ –Ω–µ—Ç —Ñ–ª–∞–≥–∞, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
		if hasTrue(realGamesFlags) {
			if flags.Debug {
				fmt.Printf("DEBUG: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª %s (–Ω–µ—Ç —Ñ–ª–∞–≥–∞, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏)\n", fileName)
			}
			return
		}
	}

	actualFilePath := strings.TrimSuffix(filePath, ".input") + ".actual"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ actual —Ñ–∞–π–ª–∞ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
	if _, err := os.Stat(actualFilePath); err == nil {
		inputLines, err1 := countLines(filePath)
		actualLines, err2 := countLines(actualFilePath)

		if err1 == nil && err2 == nil && inputLines == actualLines {
			fmt.Printf("–§–∞–π–ª %s –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)\n", fileName)
			return
		}
	}

	fmt.Printf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: %s\n", fileName)

	// –ß–∏—Ç–∞–µ–º input —Ñ–∞–π–ª
	events, err := trainer.ReadInputFile(filePath)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v\n", fileName, err)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
	eventStrings := make([]string, len(events))
	odds := make([]struct{ OddF, OddX, OddL float64 }, len(events))

	for i, event := range events {
		eventStrings[i] = event.Result
		odds[i] = struct{ OddF, OddX, OddL float64 }{
			OddF: event.OddF,
			OddX: event.OddX,
			OddL: event.OddL,
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	generatedRecords := trainer.GenerateRecordsWithOdds(eventStrings, odds, flags, strategy)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ actual —Ñ–∞–π–ª
	if err := trainer.SaveToCSV(generatedRecords, actualFilePath); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v\n", actualFilePath, err)
		return
	}

	fmt.Printf("–§–∞–π–ª %s —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ %s\n", fileName, filepath.Base(actualFilePath))
}

// countLines –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
func countLines(filePath string) (int, error) {
	content, err := ioutil.ReadFile(filePath)
	if err != nil {
		return 0, err
	}

	lines := strings.Split(string(content), "\n")
	// –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
	count := 0
	for _, line := range lines {
		if strings.TrimSpace(line) != "" {
			count++
		}
	}

	return count, nil
}

func hasTrue(m map[string]bool) bool {
	for _, value := range m {
		if value {
			return true
		}
	}
	return false
}
